<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>zachMelody</title><link>https://zachMelody.github.io/</link><description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description><generator>Hugo 0.94.2 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>zachMelody@ignore.com (zachMelody)</managingEditor><webMaster>zachMelody@ignore.com (zachMelody)</webMaster><lastBuildDate>Sun, 13 Mar 2022 03:30:18 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://zachMelody.github.io/rss.xml"/><item><title>Readme</title><link>https://zachMelody.github.io/posts/test/readme/</link><guid isPermaLink="true">https://zachMelody.github.io/posts/test/readme/</guid><pubDate>Wed, 09 Mar 2022 11:33:07 +0800</pubDate><author>zachMelody@ignore.com (zachMelody)</author><description>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nn">cn.javaguide&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.Field&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.InvocationTargetException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.lang.reflect.Method&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ClassNotFoundException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">NoSuchMethodException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IllegalAccessException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">InstantiationException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">InvocationTargetException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">NoSuchFieldException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 获取 TargetObject 类的 Class 对象并且创建 TargetObject 类实例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">tagetClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cn.javaguide.TargetObject&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TargetObject&lt;/span> &lt;span class="n">targetObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">TargetObject&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">tagetClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newInstance&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 获取 TargetObject 类中定义的所有方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Method&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">methods&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredMethods&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Method&lt;/span> &lt;span class="n">method&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">methods&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 获取指定方法并调用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Method&lt;/span> &lt;span class="n">publicMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;publicMethod&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">publicMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">targetObject&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;JavaGuide&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 获取指定参数并对参数进行修改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Field&lt;/span> &lt;span class="n">field&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredField&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//为了对类中的参数进行修改我们取消安全检查
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">field&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">field&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">targetObject&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;JavaGuide&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 调用 private 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Method&lt;/span> &lt;span class="n">privateMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">targetClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;privateMethod&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//为了调用private方法我们取消安全检查
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">privateMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setAccessible&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">privateMethod&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">targetObject&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://zachMelody.github.io/categories/ignore/">ignore</category><category domain="https://zachMelody.github.io/tags/test/">test</category></item><item><title>转载：Github Pages 部署</title><link>https://zachMelody.github.io/posts/githubpages+action%E9%83%A8%E7%BD%B2hugo/</link><guid isPermaLink="true">https://zachMelody.github.io/posts/githubpages+action%E9%83%A8%E7%BD%B2hugo/</guid><pubDate>Tue, 08 Mar 2022 18:24:04 +0800</pubDate><author>zachMelody@ignore.com (zachMelody)</author><description>&lt;blockquote>
&lt;p>&lt;strong>转载&lt;/strong>自 &lt;a href="https://www.waynerv.com/posts/setup-blog-with-hugo-and-github-pages/">https://www.waynerv.com/posts/setup-blog-with-hugo-and-github-pages/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>作为一个已经入行了一年多的（老）技术人，维护一个看得过去的个人博客是很有必要的。&lt;/p>
&lt;p>刚学编程的时候，还开源过一个基于 Flask 和 MongoDB 的&lt;a href="https://github.com/waynerv/originblog">博客项目&lt;/a>，但后面就没怎么使用和维护了，除开主观上的懒，还因为：&lt;/p>
&lt;ul>
&lt;li>自建博客绕不开主机和域名，这是一笔持续的经济成本。国内的主机往往是第一年割肉第二年宰猪，国外的主机访问延迟很高。&lt;/li>
&lt;li>国内主机更麻烦的是还需要定期备案，第一个博客就是因为备案到期中断了。&lt;/li>
&lt;li>博客功能的实现技术难度不大，开始还有一些新鲜感，有了工作经验后就很难有兴趣继续维护了。&lt;/li>
&lt;/ul>
&lt;p>刚好最近有写一些文章的打算，决定找个简单、省事（最后发现并没有）且不花钱的路子把博客再搞起来，一番研究后，选择了生成静态站点发布到 GitHub Pages 的方案。&lt;/p>
&lt;h2 id="工作流">工作流&lt;/h2>
&lt;p>整个方案的流程大致如下：&lt;/p>
&lt;ol>
&lt;li>用 Markdown 格式写作文章。&lt;/li>
&lt;li>使用生成器将 markdown 文件转换成静态站点。&lt;/li>
&lt;li>将生成的站点内容推送到 GitHub 并发布。&lt;/li>
&lt;/ol>
&lt;p>写 markdown 没啥好说的，什么编辑器都可以，我一直用的是 Typora。&lt;/p>
&lt;p>静态站点生成器我选择了 Hugo，原因是最近刚好在学 Go，此外还有 Gatsby、Jekyll、Hexo 等很多选项。&lt;/p>
&lt;p>接下来要做的工作是生成静态站点并通过 GitHub Pages 发布。&lt;/p>
&lt;h2 id="生成静态站点">生成静态站点&lt;/h2>
&lt;p>使用 Hugo 生成静态博客站点非常简单，具体的步骤和用法可以参考官方文档的 &lt;a href="https://gohugo.io/getting-started/quick-start/">Quick Start&lt;/a>。下面简单介绍下整个过程：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装 Hugo。macOS 下可以直接使用 homebrew 安装：&lt;code>brew install hugo。&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个新的站点。这会生成一个特定目录结构的项目文件夹，用来维护所有的站点内容。假设我们想把它命名为 hugo-blog，则使用以下命令创建并切换到该目录，后续的操作和命令都会在这个根目录下执行：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> hugo new site hugo-blog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">cd&lt;/span> hugo-blog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>
&lt;p>安装一个主题。这一步是必需的，否则会因为缺少基础模板无法生成站点。安装主题有 3 种方式，以 eureka 主题为例：&lt;/p>
&lt;ul>
&lt;li>直接下载主题的压缩文件，将解压得到的文件夹重命名为主题名称 eureka 放到 themes/目录下。&lt;/li>
&lt;li>通过 git submodule 安装：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git submodule add https://github.com/wangchucheng/hugo-eureka.git themes/eureka
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>通过 Hugo Modules 安装（这种方式要求本机安装有 &lt;a href="https://golang.org/dl/">Go 1.12&lt;/a> 及以上版本，且只有部分主题支持）：
&lt;pre>hugo mod init &amp;lt;module_name&amp;gt;
&lt;/pre>
&amp;lt;module_name&amp;gt; 并不重要，随便起个名字就行。
安装后需要启用主题，方法是将主题名称写入到根目录下的默认配置文件 config.yml 中：
&lt;pre>echo 'theme = "eureka"' &amp;gt;&amp;gt; config.toml
&lt;/pre>
如果是通过 Hugo Modules 安装，需要把主题名称替换成模块名称：
&lt;pre>echo 'theme = "github.com/wangchucheng/hugo-eureka"' &amp;gt;&amp;gt; config.toml
&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>添加一篇文章。可以直接在 content/posts 目录下创建 markdown 文件，但需要手动写入一些元信息，因此推荐使用 Hugo 自带的命令：hugo new posts/my-first-post.md，添加的文件会以如下元信息开头：&lt;/p>
&lt;pre>---
title: "My First Post"
date: 2019-03-26T08:47:11+01:00
draft: true
---
&lt;/pre>
&lt;p>在下方接着写入文章内容即可。注意此时该文件为草稿状态，写作完成后需要改成 draft: false 才能部署。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动 Hugo 预览服务器。Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。&lt;/p>
&lt;pre>hugo server -D
&lt;/pre>
&lt;p>添加 -D 选项以输出草稿状态的文章，执行成功后可以通过 http://localhost:1313/ 访问站点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自定义主题配置。站点的配置项默认保存在根目录的 config.toml 文件中，配置项较多时通常会用主题提供的预设配置文件来替换该文件，还可以通过 config 目录加多个文件的方式来组织配置。默认配置文件如下：&lt;/p>
&lt;pre>baseURL = "http://example.org/" # 发布地址，由主机名以及路径组成
languageCode = "en-us" # 语言代码，中文可以设置为"zh"
title = "My New Hugo Site" # 站点标题
&lt;/pre>
&lt;p>这一步应该是整个过程中最麻烦也是最容易出问题的一步，视乎你选择的主题与想要的功能不同，需要自定义的配置项也不同，数量从几个到上百个不等。有些主题会有详细的文档解释配置过程，有些则一笔带过只能自己去摸索，配置较多时相互间可能还有依赖关系，最好更改一个配置就刷新一次页面确认下结果。
建议起步时一切从简，花大把时间搞各种花里胡哨的样式和功能，还不如多写几篇文章。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>构建静态页面。站点配置成我们理想的效果之后就可以构建静态页面了：&lt;/p>
&lt;pre>hugo -D
&lt;/pre>
&lt;p>添加 -D 选项可以在结果中包括草稿内容，默认情况下静态页面会输出到根目录下的 public 文件夹中。&lt;/p>
&lt;h2 id="通过-github-pages-发布通过-github-pages-发布contents通过-github-pages-发布">(#通过-github-pages-发布)&lt;a href="https://zachMelody.github.io/posts/githubpages+action%E9%83%A8%E7%BD%B2hugo/#contents:%E9%80%9A%E8%BF%87-github-pages-%E5%8F%91%E5%B8%83">通过 GitHub Pages 发布&lt;/a>&lt;/h2>
&lt;p>这一步 Hugo 的官方文档同样在 &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Host on GitHub&lt;/a> 中进行了详细的介绍，并且还很贴心的提供了自动化操作的 Shell 脚本。&lt;/p>
&lt;p>有两种方式：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过个人主页发布：必须创建一个 &amp;lt;USERNAME&amp;gt;.github.io 仓库来托管生成的静态内容，发布后的域名为 https://&amp;lt;USERNAME&amp;gt;.github.io。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过项目主页发布：可以随意创建 &amp;lt;PROJECT_NAME&amp;gt; 仓库，发布后的域名为 https://&amp;lt;USERNAME&amp;gt;.github.io/&amp;lt;PROJECT_NAME&amp;gt;。&lt;/p>
&lt;p>视选择的发布方式不同，我们需要将 config.yml 中的 baseUrl 设置为不同的值。&lt;/p>
&lt;h3 id="通过个人主页发布">通过个人主页发布&lt;/h3>
&lt;p>建议非特殊情况下使用第 1 种方式，原因是许多主题都不能很好的支持第 2 种，具体来说是将 config.toml 的 baseURL 设置为含子路径的地址时，不能正确的处理所有资源的构建位置。我尝试了 3 个主题，均遭遇了不同的问题：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>eureka: 构建失败，提示 :&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="nx">building&lt;/span> &lt;span class="nx">site&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">POSTCSS&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">failed&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">transform&lt;/span> &lt;span class="s2">&amp;#34;css/eureka.css&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">css&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">resource&lt;/span> &lt;span class="s2">&amp;#34;css/waynerv.github.io/css/eureka.css_fc3f76d7bee2760c3a903059afc3d9b2&amp;#34;&lt;/span> &lt;span class="nx">not&lt;/span> &lt;span class="nx">found&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">file&lt;/span> &lt;span class="nx">cache&lt;/span>&lt;span class="sb">```
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>LoveIt: 构建成功，但除主页以外的文章、分类和标签的页面均提示 404。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MemE: 构建成功，但文章中插入的图片加载 404（放在同一文件夹的 favicon 却能正常展示）。&lt;/p>
&lt;p>这个问题我在 eureka 项目提交了 issue，开发者回复可能是 Hugo 本身的机制所导致，并已经在 Hugo 论坛中提出了此&lt;a href="https://discourse.gohugo.io/t/cached-resources-not-found-in-file-cache-when-baseurl-contains-subdirectory/30182/8">问题&lt;/a>，有兴趣的可以关注后续进展。&lt;/p>
&lt;h3 id="发布步骤">发布步骤&lt;/h3>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>在 GitHub 创建个人主页仓库，仓库名称必须设置为 &amp;lt;USERNAME&amp;gt;.github.io，这个仓库仅存放生成的静态内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 GitHub 创建一个项目仓库 hugo-blog 并添加为我们本地项目文件夹的远程仓库。这个仓库用来维护站点配置和原始的文章内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>假设我们在已经通过上文的步骤在 public 文件夹中生成了想发布的静态内容，运行：&lt;/p>
&lt;pre>git submodule add -b main https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public
&lt;/pre>
&lt;p>在 public 目录中创建一个 git 子模块，之后这个目录将以 &lt;a href="https://github.com/&amp;amp;lt;USERNAME&amp;amp;gt;/&amp;amp;lt;USERNAME&amp;amp;gt;.github.io">https://github.com/&amp;amp;lt;USERNAME&amp;amp;gt;/&amp;amp;lt;USERNAME&amp;amp;gt;.github.io&lt;/a> 作为远程仓库。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确保配置文件中的 baseUrl 已经设置为了 &amp;lt;USERNAME&amp;gt;.github.io。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hugo 为我们接下来的部署操作提供了一个自动化的 Shell 脚本：&lt;/p>
&lt;pre>#!/bin/sh
# 任一步骤执行失败都会终止整个部署过程
set -e
printf "\033[0;32mDeploying updates to GitHub...\033[0m\n"
# 构建静态内容
hugo # if using a theme, replace with hugo -t &amp;lt;YOURTHEME&amp;gt;
# 切换到 Public 文件夹
cd public
# 添加更改到 git
git add .
# 提交更改
msg="rebuilding site $(date)"
if [ -n "$*" ]; then
msg="$*"
fi
git commit -m "$msg"
# 推送到远程仓库
git push origin main
&lt;/pre>
&lt;p>将如上内容保存到 deploy.sh 文件中，并执行 chmod +x deploy.sh 为其添加可执行权限。接着执行部署脚本：
&lt;code>./deploy.sh&lt;/code>&lt;/p>
&lt;p>大功告成！稍等几分钟就可以在 https://&lt;USERNAME>.github.io 看到我们的个人博客了。&lt;/p>
&lt;h2 id="通过-github-actions-自动部署">通过 GitHub Actions 自动部署&lt;/h2>
&lt;p>目前我们的「创作-发布」流程如下：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在项目仓库编辑原始内容并进行版本管理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行自动脚本生成静态站点并推送到个人主页仓库完成发布。&lt;/p>
&lt;p>这套流程已经很流畅，但还有一些改进空间：我们可以使用 &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a>，在每次向远程的项目仓库推送原始内容更改时自动执行第 2 步进行发布。&lt;/p>
&lt;p>GitHub 上有许多这类自动化部署任务的开源 Actions 项目，我们选择了其中一个简单易用的 &lt;a href="https://github.com/peaceiris/actions-hugo#getting-started">GitHub Actions for Hugo&lt;/a>。具体的操作步骤截图和详细配置项可以查看该项目的 &lt;a href="https://github.com/peaceiris/actions-hugo#github-actions-for-hugo">README&lt;/a>。下面简单介绍下配置过程：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在项目文件夹中添加目录和文件：.github/workflows/gh-pages.yml，gh-pages.yml 文件内容如下：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">github pages&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">main &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 每次推送到 main 分支都会触发部署任务&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-18.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch Hugo themes (true OR recursive)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-depth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch all history for .GitInfo and .Lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;0.79.1&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">extended&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hugo --minify&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy_key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">external_repository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">&amp;amp;lt;USERNAME&amp;amp;gt;/&amp;amp;lt;USERNAME&amp;amp;gt;.github.io&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 替换成上文所创建的个人主页仓库&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_branch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">main&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_dir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./public&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>这个文件所定义的 workflow 基于项目仓库运行，但我们需要将运行过程生成的静态文件推送到个人主页仓库 &amp;amp;lt;USERNAME&amp;amp;gt;.github.io 完成发布，因此在 Deploy 任务中按照文档的 [Deploy to external repository external_repository](https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-deploy-to-external-repository-external_repository) 一节做了专门的配置。
&lt;/code>&lt;/pre>
&lt;ol start="2">
&lt;li>
&lt;p>在本地生成 SSH 部署密钥：&lt;/p>
&lt;pre>ssh-keygen -t rsa -b 4096 -C "$(git config user.email)" -f gh-pages -N ""
# 将在当前目录生成如下密钥文件:
# gh-pages.pub (公钥)
# gh-pages (私钥)
&lt;/li>
&lt;li>
&lt;p>在 GitHub 分别进入项目仓库和个人主页仓库的 Settings 页面：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>将公钥 gh-pages.pub 作为 Secret 添加到项目仓库，并设置 Name 为 ACTIONS_DEPLOY_KEY。&lt;/p>
&lt;ul>
&lt;li>将私钥 gh-pages 作为 Deploy Key 添加到个人主页仓库，并设置为 Allow write access。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>接下来我们测试一下效果。&lt;/p>
&lt;p>在本地做一些更改，预览效果后提交并推送，然后在项目仓库的 GitHub Actions 页面检查相应的 workflow 是否运行成功。不出意外的话，很快个人主页仓库将新增一个由该 workflow 创建的提交，访问个人博客页面也会发现页面已经更新。&lt;/p>
&lt;h2 id="个人体验">个人体验&lt;/h2>
&lt;p>由于先后选择的 3 个主题均遭遇了上述发布地址不能包含子路径的问题，我在基本按照官方文档操作的前提下，依然花了超过 10 个小时才把&lt;a href="https://waynerv.github.io/">博客&lt;/a>上线，浪费了很多时间在配置主题以及寻找问题的解决方案上。本以为选择了一个简单快捷的省心方案，结果还是免不了过程的一顿踩坑和折腾。&lt;/p>
&lt;p>虽然搭建博客的流程不算省心，但我所遇到的这些问题也算是个例。一切准备就绪后，我们可以像写代码一样写博客，对文章修改提交即自动发布，也不需要考虑博客的样式、后台功能及主机维护等问题，对提升写作效率会有所帮助，可以省下来很多的时间和精力，综合来看体验还是不错的。&lt;/p></description></item></channel></rss>