<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 旋律小站</title>
    <link>https://zachmelody.github.io/posts/</link>
    <description>Recent content in Posts on 旋律小站</description>
    <image>
      <url>https://zachmelody.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://zachmelody.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 14 Mar 2022 15:47:57 +0800</lastBuildDate><atom:link href="https://zachmelody.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机基础</title>
      <link>https://zachmelody.github.io/posts/face/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 14 Mar 2022 15:47:57 +0800</pubDate>
      
      <guid>https://zachmelody.github.io/posts/face/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mysql面试题</title>
      <link>https://zachmelody.github.io/posts/face/mysql/</link>
      <pubDate>Sun, 13 Mar 2022 11:44:44 +0800</pubDate>
      
      <guid>https://zachmelody.github.io/posts/face/mysql/</guid>
      <description>京东 1. 数据库的事务  事务是逻辑上的一组操作，要么都执行，要么都不执行。
 何为 ACID 特性呢？  原子性（Atomicity） 一致性（Consistency） 隔离性（Isolation） 持久性（Durability）  InnoDB 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性,通过 锁机制、MVCC 等手段来保证事务的隔离性（ 默认支持的隔离级别是 REPEATABLE-READ ）。
2. 建索引的注意事项   选择合适的字段创建索引：
 不为 NULL 的字段 ：对于数据为 NULL 的字段，数据库较难优化 被频繁查询的字段 被作为条件查询的字段 频繁需要排序的字段 被经常频繁用于连接的字段    被频繁更新的字段应该慎重建立索引。
  尽可能的考虑建立联合索引而不是单列索引: 磁盘空间
  注意避免冗余索引 。
  考虑在字符串类型的字段上使用前缀索引代替普通索引。
  3. MySQL中的隔离级别  READ-UNCOMMITTED (读取未提交)： 最低的隔离级别，允许读取尚未提交的数据变更 READ-COMMITTED (读取已提交)： 允许读取并发事务已经提交的数据 REPEATABLE-READ (可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改 SERIALIZABLE (可串行化)： 完全服从 ACID，所有的事务依次逐个执行     隔离级别 脏读 不可重复读 幻读     READ-UNCOMMITTED √ √ √   READ-COMMITTED × √ √   REPEATABLE-READ × × √   SERIALIZABLE × × ×    不可重复读和幻读区别：</description>
    </item>
    
    <item>
      <title>Readme</title>
      <link>https://zachmelody.github.io/posts/test/readme/</link>
      <pubDate>Wed, 09 Mar 2022 11:33:07 +0800</pubDate>
      
      <guid>https://zachmelody.github.io/posts/test/readme/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  package cn.javaguide;  import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method;  public class Main {  public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchFieldException {  /** * 获取 TargetObject 类的 Class 对象并且创建 TargetObject 类实例 */  Class&amp;lt;?</description>
    </item>
    
    <item>
      <title>转载：Github Pages 部署</title>
      <link>https://zachmelody.github.io/posts/githubpages&#43;action%E9%83%A8%E7%BD%B2hugo/</link>
      <pubDate>Tue, 08 Mar 2022 18:24:04 +0800</pubDate>
      
      <guid>https://zachmelody.github.io/posts/githubpages&#43;action%E9%83%A8%E7%BD%B2hugo/</guid>
      <description>转载自 https://www.waynerv.com/posts/setup-blog-with-hugo-and-github-pages/
 作为一个已经入行了一年多的（老）技术人，维护一个看得过去的个人博客是很有必要的。
刚学编程的时候，还开源过一个基于 Flask 和 MongoDB 的博客项目，但后面就没怎么使用和维护了，除开主观上的懒，还因为：
 自建博客绕不开主机和域名，这是一笔持续的经济成本。国内的主机往往是第一年割肉第二年宰猪，国外的主机访问延迟很高。 国内主机更麻烦的是还需要定期备案，第一个博客就是因为备案到期中断了。 博客功能的实现技术难度不大，开始还有一些新鲜感，有了工作经验后就很难有兴趣继续维护了。  刚好最近有写一些文章的打算，决定找个简单、省事（最后发现并没有）且不花钱的路子把博客再搞起来，一番研究后，选择了生成静态站点发布到 GitHub Pages 的方案。
工作流 整个方案的流程大致如下：
 用 Markdown 格式写作文章。 使用生成器将 markdown 文件转换成静态站点。 将生成的站点内容推送到 GitHub 并发布。  写 markdown 没啥好说的，什么编辑器都可以，我一直用的是 Typora。
静态站点生成器我选择了 Hugo，原因是最近刚好在学 Go，此外还有 Gatsby、Jekyll、Hexo 等很多选项。
接下来要做的工作是生成静态站点并通过 GitHub Pages 发布。
生成静态站点 使用 Hugo 生成静态博客站点非常简单，具体的步骤和用法可以参考官方文档的 Quick Start。下面简单介绍下整个过程：
  安装 Hugo。macOS 下可以直接使用 homebrew 安装：brew install hugo。
  创建一个新的站点。这会生成一个特定目录结构的项目文件夹，用来维护所有的站点内容。假设我们想把它命名为 hugo-blog，则使用以下命令创建并切换到该目录，后续的操作和命令都会在这个根目录下执行：
  1 2   hugo new site hugo-blog  cd hugo-blog    安装一个主题。这一步是必需的，否则会因为缺少基础模板无法生成站点。安装主题有 3 种方式，以 eureka 主题为例：</description>
    </item>
    
  </channel>
</rss>
